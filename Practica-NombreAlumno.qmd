---
format: 
  html:
    self-contained: true
editor: visual
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb <- read.csv("airbnb-listings.csv", sep = ";")
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

    ```         
    ```

    ------------------------------------------------------------------------

    ```{r}
    df_madrid <- airbnb[, c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms',
                            'Bedrooms','Beds','Price','Square.Feet','Guests.Included',
                            'Extra.People','Review.Scores.Rating','Latitude','Longitude')]

    df_madrid <- subset(df_madrid,
                        City == "Madrid" &
                        Room.Type == "Entire home/apt" &
                        Neighbourhood != "")

    df_madrid$City <- NULL
    df_madrid$Room.Type <- NULL


    ```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

    ```{r}

    df_madrid$Square.Meters <- df_madrid$Square.Feet * 0.092903

    ```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

    ```{r}

    na_metros <- sum(is.na(df_madrid$Square.Meters))
    total <- nrow(df_madrid)
    porcentaje_na <- (na_metros / total) * 100
    porcentaje_na
    ```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
validos <- df_madrid[!is.na(df_madrid$Square.Meters), ]
zero_mq <- sum(validos$Square.Meters == 0)
percentuale_zero <- (zero_mq / nrow(validos)) * 100
percentuale_zero

```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

    ```{r}
    df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA


    sum(is.na(df_madrid$Square.Meters))
    ```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

    ```{r}
    library(ggplot2)

    ggplot(df_madrid, aes(x = Square.Meters)) +
      geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
      labs(title = "Distribución de metros cuadrados", x = "Metros cuadrados", y = "Frecuencia")
    ```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

    ```{r}
    df_madrid$Square.Meters[df_madrid$Square.Meters < 20] <- NA
    sum(is.na(df_madrid$Square.Meters))
    ```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    barrios_con_solo_na <- unique(df_madrid$Neighbourhood[is.na(df_madrid$Square.Meters)])

    for (barrio in barrios_con_solo_na) {
      if (all(is.na(df_madrid$Square.Meters[df_madrid$Neighbourhood == barrio]))) {
        df_madrid <- df_madrid[df_madrid$Neighbourhood != barrio, ]
      }
    }

    sum(sapply(split(df_madrid$Square.Meters, df_madrid$Neighbourhood), function(x) all(is.na(x))))

    ```

    ------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    ```{r}
    anova_test <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
    summary(anova_test)
    ```

    ------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

    ```{r}
    modelo_anova <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
    tukey_result <- TukeyHSD(modelo_anova, "Neighbourhood")
    tukey_result$Neighbourhood["Adelfas-Acacias", ]
    ```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es bajo significa que los barrios son diferentes, si es alto significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
modelo_anova <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
tukey_result <- TukeyHSD(modelo_anova, "Neighbourhood")

matriz_pvalores <- tukey_result$Neighbourhood[, "p adj"]
nombres <- rownames(tukey_result$Neighbourhood)
barrios <- unique(unlist(strsplit(nombres, "-")))

matriz_dist <- matrix(0, nrow = length(barrios), ncol = length(barrios))
rownames(matriz_dist) <- barrios
colnames(matriz_dist) <- barrios

for (i in seq_along(nombres)) {
  b <- unlist(strsplit(nombres[i], "-"))
  matriz_dist[b[1], b[2]] <- 1 - matriz_pvalores[i]
  matriz_dist[b[2], b[1]] <- 1 - matriz_pvalores[i]
}

distancia <- as.dist(matriz_dist)
hc <- hclust(distancia)
plot(hc, main = "Dendrograma de barrios según metros cuadrados")
```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

    El punto de corte aconsejable es 0.35, ya que al trazar una línea horizontal en ese valor se observan 4 grupos bien diferenciados. Por lo tanto, el número de clusters es 4.

    ```         
    ```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

    ```{r}

    cluster_bairros <- cutree(hc, k = 4)
    cluster_df <- data.frame(Neighbourhood = names(cluster_bairros),
                             neighb_id = cluster_bairros)


    df_madrid <- merge(df_madrid, cluster_df, by = "Neighbourhood", all.x = TRUE)

    table(df_madrid$neighb_id)
    ```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

    ```{r}
    set.seed(123)
    n <- nrow(df_madrid)
    indices <- sample(1:n, size = 0.8 * n)
    train <- df_madrid[indices, ]
    test <- df_madrid[-indices, ]




    ```

    ```         
    ```

    ```         
    ```

    ```         
    ```

    ```         
    ```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
mod <- lm(Square.Meters ~ Accommodates + Bedrooms + Price, data = train)

test_clean <- test[complete.cases(test[, c("Accommodates", "Bedrooms", "Price")]), ]

test_clean$predicted_m2 <- predict(mod, newdata = test_clean)

head(test_clean$predicted_m2)
```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

    ```{r}

    test_eval <- test_clean[complete.cases(test_clean[, c("Square.Meters", "predicted_m2")]), ]

    mse <- mean((test_eval$Square.Meters - test_eval$predicted_m2)^2)
    mae <- mean(abs(test_eval$Square.Meters - test_eval$predicted_m2))
    r2 <- summary(mod)$r.squared

    mse
    mae
    r2
    ```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
new_apartment <- data.frame(
  Neighbourhood = factor("Sol", levels = levels(train$Neighbourhood)),
  Accommodates = 6,
  Bathrooms = 1,
  Bedrooms = 3,
  Beds = 3,
  Price = 80,
  Square.Feet = NA,
  Guests.Included = 1,
  Extra.People = 0,
  Review.Scores.Rating = 80,
  Latitude = mean(train$Latitude, na.rm = TRUE),
  Longitude = mean(train$Longitude, na.rm = TRUE),
  neighb_id = as.integer(names(sort(table(train$neighb_id), decreasing = TRUE)[1]))
)

predicted_m2 <- predict(mod, newdata = new_apartment)
rounded_pred <- round(predicted_m2, 0)
print(rounded_pred)


summary(mod)$coefficients["Bedrooms", ]
```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

    ```{r}
    missing_rows <- is.na(df_madrid$Square.Meters)


    predicted_missing <- predict(mod, newdata = df_madrid[missing_rows, ])


    df_madrid$Square.Meters[missing_rows] <- round(predicted_missing, 0)

    sum(is.na(df_madrid$Square.Meters))
    ```

------------------------------------------------------------------------
